@use "sass:lists";
// Vendor Prefixes
// All vendor mixins are deprecated as of v3.2.0 due to the introduction of
// Autoprefixer in our Gruntfile. They will be removed in v4.

// - Animations
// - Backface visibility
// - Box shadow
// - Box sizing
// - Content columns
// - Hyphens
// - Placeholder text
// - Transformations
// - Transitions
// - User Select
// - cursor grab

// Animations
@mixin animation($animation) {
    animation: $animation;
}

@mixin animation-name($name) {
    animation-name: $name;
}

@mixin animation-duration($duration) {
    animation-duration: $duration;
}

@mixin animation-timing-function($timing-function) {
    animation-timing-function: $timing-function;
}

@mixin animation-delay($delay) {
    animation-delay: $delay;
}

@mixin animation-iteration-count($iteration-count) {
    animation-iteration-count: $iteration-count;
}

@mixin animation-direction($direction) {
    animation-direction: $direction;
}

@mixin animation-fill-mode($fill-mode) {
    animation-fill-mode: $fill-mode;
}

@mixin keyframes($name) {
    @keyframes #{$name} {
        @content;
    }
}

// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden`

@mixin backface-visibility($visibility) {
    backface-visibility: $visibility;
}

// Drop shadows
// Note: Deprecated `.box-shadow()` as of v3.1.0 since all of Bootstrap's
// supported browsers that have box shadow capabilities now support it.

@mixin box-shadow($shadow...) {
    box-shadow: $shadow;
}

// Box sizing
@mixin box-sizing($boxmodel) {
    box-sizing: $boxmodel;
}

// CSS3 Content Columns
@mixin content-columns($column-count, $column-gap: $grid-gutter-width) {
    column-count: $column-count;
    column-gap: $column-gap;
}

// Optional hyphenation
@mixin hyphens($mode: auto) {
    word-wrap: break-word;
    hyphens: $mode;
}

// Transformations
@mixin scale($ratio...) {
    transform: scale($ratio);
}

@mixin scaleX($ratio) {
    transform: scaleX($ratio);
}

@mixin scaleY($ratio) {
    transform: scaleY($ratio);
}

@mixin skew($x, $y) {
    transform: skewX($x) skewY($y);
}

@mixin translate($x, $y) {
    transform: translate($x, $y);
}

@mixin translate3d($x, $y, $z) {
    transform: translate3d($x, $y, $z);
}

@mixin scale3d($x, $y, $z) {
    transform: scale3d($x, $y, $z);
}

@mixin rotate($degrees) {
    transform: rotate($degrees);
}

@mixin rotateX($degrees) {
    transform: rotateX($degrees);
}

@mixin rotateY($degrees) {
    transform: rotateY($degrees);
}

@mixin perspective($perspective) {
    perspective: $perspective;
}

@mixin perspective-origin($perspective) {
    perspective-origin: $perspective;
}

@mixin transform-origin($origin) {
    transform-origin: $origin;
}

@mixin transform($transforms) {
    transform: $transforms;
}

// Transitions

@mixin transition($transition...) {
    transition: $transition;
}

@mixin transition-property($transition-property...) {
    transition-property: $transition-property;
}

@mixin transition-delay($transition-delay) {
    transition-delay: $transition-delay;
}

@mixin transition-duration($transition-duration...) {
    transition-duration: $transition-duration;
}

@mixin transition-timing-function($timing-function) {
    transition-timing-function: $timing-function;
}

@mixin transition-transform($transition...) {
    transition: transform $transition;
}

// transition custom

@function prefix($property, $prefixes: webkit moz o) {
    $vendor-prefixed-properties: transform background-clip background-size;
    $result: ();

    @each $prefix in $prefixes {
        @if index($vendor-prefixed-properties, $property) {
            $property: -#{$prefix}-#{$property};
        }

        $result: list.append($result, $property);
    }

    @return $result;
}

@function trans-prefix($transition, $prefix: moz) {
    $prefixed: ();

    @each $trans in $transition {
        $prop-name: list.nth($trans, 1);
        $vendor-prop-name: prefix($prop-name, $prefix);
        $prop-vals: list.nth($trans, 2);
        $prefixed: list.append($prefixed, $vendor-prop-name $prop-vals, comma);
    }

    @return $prefixed;
}

@mixin transitionCustom($values...) {
    $transitions: ();

    transition: $values;

    @each $declaration in $values {
        $prop: list.nth($declaration, 1);
        $prop-opts: ();
        $length: list.length($declaration);

        @if $length >= 2 {
            @for $i from 2 through $length {
                $prop-opts: list.append($prop-opts, list.nth($declaration, $i));
            }
        }

        $trans: $prop, $prop-opts;
        $transitions: list.append($transitions, $trans, comma);
    }
}

// User select
// For selecting text on the page

@mixin user-select($select) {
    user-select: $select;
}

// mouse grab

@mixin grab-cursor {
    cursor: grab;
}

@mixin grabbing-cursor {
    cursor: grabbing;
}